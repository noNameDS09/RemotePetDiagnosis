{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { jwtVerify } from \"jose\";\n\nconst JWT_SECRET_KEY = process.env.JWT_SECRET;\n\nasync function verifyAndDecodeToken(token: string) {\n  if (!JWT_SECRET_KEY) {\n    console.error(\"JWT_SECRET environment variable is not set.\");\n    return null;\n  }\n\n  try {\n    const secret = new TextEncoder().encode(JWT_SECRET_KEY);\n    const { payload } = await jwtVerify(token, secret);\n    return payload;\n  } catch (error) {\n    console.warn(\n      \"Token verification failed:\",\n      error instanceof Error ? error.message : error\n    );\n    return null;\n  }\n}\n\nexport async function middleware(request: NextRequest) {\n  const token = request.cookies.get(\"auth_token\")?.value;\n  const pathname = request.nextUrl.pathname;\n\n  // console.log(\"üîç pathname:\", pathname);\n  // console.log(\"üîç token present:\", !!token);\n\n  if (!token) {\n    // console.log(\"‚ùå No token ‚Äî redirecting to /login\");\n    if (pathname === \"/auth/login\" || pathname === \"/auth/signup\") {\n      return NextResponse.next();\n    }\n    return NextResponse.redirect(new URL(\"/auth/login\", request.url));\n  }\n\n  const payload = await verifyAndDecodeToken(token);\n  // console.log(\"üîç decoded payload:\", payload);\n\n  if (!payload) {\n    // console.log(\"‚ùå Invalid token ‚Äî redirecting to /login and deleting cookie\");\n    const res = NextResponse.redirect(new URL(\"/auth/login\", request.url));\n    res.cookies.delete(\"auth_token\");\n    return res;\n  }\n\n  const isDoctor = payload.isDoctor;\n  // console.log(\"‚úÖ isDoctor:\", isDoctor);\n\n  if (isDoctor && pathname.startsWith(\"/dashboard/user\")) {\n    // console.log(\"üîÅ Doctor trying to access /user ‚Äî redirecting to /doctor\");\n    return NextResponse.redirect(new URL(\"/dashboard/doctor\", request.url));\n  }\n\n  if (!isDoctor && pathname.startsWith(\"/dashboard/doctor\")) {\n    // console.log(\"üîÅ User trying to access /doctor ‚Äî redirecting to /user\");\n    return NextResponse.redirect(new URL(\"/dashboard/user\", request.url));\n  }\n\n  if (pathname === \"/auth/login\" || pathname === \"/auth/signup\") {\n    // console.log(\"üîÅ Already logged in ‚Äî redirecting to home\");\n    return NextResponse.redirect(new URL(\"/\", request.url));\n  }\n\n  return NextResponse.next();\n}\n\n\nexport const config = {\n  matcher: [\n    \"/dashboard/doctor/:path*\",\n    \"/dashboard/user/:path*\",\n    \"/auth/login\",\n    \"/auth/signup\",\n    \"/\", // optional: home\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEA,MAAM,iBAAiB,QAAQ,GAAG,CAAC,UAAU;AAE7C,eAAe,qBAAqB,KAAa;IAC/C,IAAI,CAAC,gBAAgB;QACnB,QAAQ,KAAK,CAAC;QACd,OAAO;IACT;IAEA,IAAI;QACF,MAAM,SAAS,IAAI,cAAc,MAAM,CAAC;QACxC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAD,EAAE,OAAO;QAC3C,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CACV,8BACA,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAE3C,OAAO;IACT;AACF;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,eAAe;IACjD,MAAM,WAAW,QAAQ,OAAO,CAAC,QAAQ;IAEzC,yCAAyC;IACzC,6CAA6C;IAE7C,IAAI,CAAC,OAAO;QACV,qDAAqD;QACrD,IAAI,aAAa,iBAAiB,aAAa,gBAAgB;YAC7D,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;QAC1B;QACA,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,eAAe,QAAQ,GAAG;IACjE;IAEA,MAAM,UAAU,MAAM,qBAAqB;IAC3C,+CAA+C;IAE/C,IAAI,CAAC,SAAS;QACZ,8EAA8E;QAC9E,MAAM,MAAM,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,eAAe,QAAQ,GAAG;QACpE,IAAI,OAAO,CAAC,MAAM,CAAC;QACnB,OAAO;IACT;IAEA,MAAM,WAAW,QAAQ,QAAQ;IACjC,wCAAwC;IAExC,IAAI,YAAY,SAAS,UAAU,CAAC,oBAAoB;QACtD,4EAA4E;QAC5E,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,qBAAqB,QAAQ,GAAG;IACvE;IAEA,IAAI,CAAC,YAAY,SAAS,UAAU,CAAC,sBAAsB;QACzD,0EAA0E;QAC1E,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,mBAAmB,QAAQ,GAAG;IACrE;IAEA,IAAI,aAAa,iBAAiB,aAAa,gBAAgB;QAC7D,6DAA6D;QAC7D,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;QACA;QACA;QACA;QACA;KACD;AACH"}}]
}